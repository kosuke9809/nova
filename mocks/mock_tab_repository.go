// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/tab.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "nova/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITabRepository is a mock of ITabRepository interface.
type MockITabRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITabRepositoryMockRecorder
}

// MockITabRepositoryMockRecorder is the mock recorder for MockITabRepository.
type MockITabRepositoryMockRecorder struct {
	mock *MockITabRepository
}

// NewMockITabRepository creates a new mock instance.
func NewMockITabRepository(ctrl *gomock.Controller) *MockITabRepository {
	mock := &MockITabRepository{ctrl: ctrl}
	mock.recorder = &MockITabRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITabRepository) EXPECT() *MockITabRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockITabRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITabRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITabRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockITabRepository) FindByID(id int) (*model.Tab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Tab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockITabRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockITabRepository)(nil).FindByID), id)
}

// List mocks base method.
func (m *MockITabRepository) List() ([]*model.Tab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*model.Tab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockITabRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockITabRepository)(nil).List))
}

// Save mocks base method.
func (m *MockITabRepository) Save(tab *model.Tab) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", tab)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockITabRepositoryMockRecorder) Save(tab interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockITabRepository)(nil).Save), tab)
}

// Update mocks base method.
func (m *MockITabRepository) Update(tab *model.Tab) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tab)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITabRepositoryMockRecorder) Update(tab interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITabRepository)(nil).Update), tab)
}
