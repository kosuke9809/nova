// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/window.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "nova/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIWindowRepository is a mock of IWindowRepository interface.
type MockIWindowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWindowRepositoryMockRecorder
}

// MockIWindowRepositoryMockRecorder is the mock recorder for MockIWindowRepository.
type MockIWindowRepositoryMockRecorder struct {
	mock *MockIWindowRepository
}

// NewMockIWindowRepository creates a new mock instance.
func NewMockIWindowRepository(ctrl *gomock.Controller) *MockIWindowRepository {
	mock := &MockIWindowRepository{ctrl: ctrl}
	mock.recorder = &MockIWindowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWindowRepository) EXPECT() *MockIWindowRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIWindowRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIWindowRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIWindowRepository)(nil).Delete), id)
}

// FindByBufferID mocks base method.
func (m *MockIWindowRepository) FindByBufferID(bufferID int) ([]*model.Window, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBufferID", bufferID)
	ret0, _ := ret[0].([]*model.Window)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBufferID indicates an expected call of FindByBufferID.
func (mr *MockIWindowRepositoryMockRecorder) FindByBufferID(bufferID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBufferID", reflect.TypeOf((*MockIWindowRepository)(nil).FindByBufferID), bufferID)
}

// FindByID mocks base method.
func (m *MockIWindowRepository) FindByID(id int) (*model.Window, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Window)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIWindowRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIWindowRepository)(nil).FindByID), id)
}

// List mocks base method.
func (m *MockIWindowRepository) List() ([]*model.Window, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*model.Window)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIWindowRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIWindowRepository)(nil).List))
}

// Save mocks base method.
func (m *MockIWindowRepository) Save(window *model.Window) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", window)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIWindowRepositoryMockRecorder) Save(window interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIWindowRepository)(nil).Save), window)
}

// Update mocks base method.
func (m *MockIWindowRepository) Update(window *model.Window) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", window)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIWindowRepositoryMockRecorder) Update(window interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIWindowRepository)(nil).Update), window)
}
